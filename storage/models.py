"""SQLAlchemy ORM models used by the application.

These classes define the structure of the database tables. SQLAlchemy's
declarative mapping is used to define columns and relationships.  Each
model corresponds to a concept in the whistleâ€‘blower workflow: reports,
evidence attached to reports, judgements generated by the LLM and audit
records of actions performed by the system.
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, Boolean
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base


Base = declarative_base()


class Report(Base):
    __tablename__ = "reports"
    id = Column(Integer, primary_key=True, index=True)
    summary = Column(Text, nullable=False)
    details = Column(Text)
    category = Column(String)
    department = Column(String)
    status = Column(String, default="submitted")
    created_at = Column(DateTime)

    evidence = relationship("Evidence", back_populates="report")
    judgements = relationship("Judgement", back_populates="report")
    audits = relationship("Audit", back_populates="report")


class Evidence(Base):
    __tablename__ = "evidence"
    id = Column(Integer, primary_key=True, index=True)
    report_id = Column(Integer, ForeignKey("reports.id"))
    filename = Column(String)
    storage_uri = Column(String)
    hash = Column(String)
    extracted_text = Column(Text)

    report = relationship("Report", back_populates="evidence")


class Judgement(Base):
    __tablename__ = "judgements"
    id = Column(Integer, primary_key=True, index=True)
    report_id = Column(Integer, ForeignKey("reports.id"))
    version = Column(Integer, default=1)
    violation_type = Column(String)  # comma separated list
    severity = Column(Integer)
    severity_label = Column(String)
    rationale = Column(Text)
    recommended_actions = Column(Text)  # comma separated list
    policy_links = Column(Text)  # JSON encoded list
    confidence = Column(String)
    needs_more_evidence = Column(Boolean, default=False)

    report = relationship("Report", back_populates="judgements")


class Audit(Base):
    __tablename__ = "audits"
    id = Column(Integer, primary_key=True, index=True)
    report_id = Column(Integer, ForeignKey("reports.id"))
    event_type = Column(String)
    payload = Column(Text)
    actor = Column(String)
    timestamp = Column(DateTime)

    report = relationship("Report", back_populates="audits")